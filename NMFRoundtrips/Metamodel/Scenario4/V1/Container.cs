//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2020.Roundtrip.Scenario4.V1.Model
{
    
    
    /// <summary>
    /// The default implementation of the Container class
    /// </summary>
    [XmlNamespaceAttribute("http://ttc2020/model/scenario4/1.0")]
    [ModelRepresentationClassAttribute("http://ttc2020/model/scenario4/1.0#//Container")]
    public partial class Container : ModelElement, TTC2020.Roundtrip.Scenario4.V1.Model.IContainer, IModelElement
    {
        
        private static Lazy<ITypedElement> _personReference = new Lazy<ITypedElement>(RetrievePersonReference);
        
        /// <summary>
        /// The backing field for the Person property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IPerson _person;
        
        private static Lazy<ITypedElement> _dogReference = new Lazy<ITypedElement>(RetrieveDogReference);
        
        /// <summary>
        /// The backing field for the Dog property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private IDog _dog;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The person property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("person")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IPerson Person
        {
            get
            {
                return this._person;
            }
            set
            {
                if ((this._person != value))
                {
                    IPerson old = this._person;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPersonChanging(e);
                    this.OnPropertyChanging("Person", e, _personReference);
                    this._person = value;
                    if ((old != null))
                    {
                        old.ParentChanged -= this.OnResetPerson;
                        old.Parent = null;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetPerson;
                    }
                    this.OnPersonChanged(e);
                    this.OnPropertyChanged("Person", e, _personReference);
                }
            }
        }
        
        /// <summary>
        /// The dog property
        /// </summary>
        [BrowsableAttribute(false)]
        [XmlElementNameAttribute("dog")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IDog Dog
        {
            get
            {
                return this._dog;
            }
            set
            {
                if ((this._dog != value))
                {
                    IDog old = this._dog;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDogChanging(e);
                    this.OnPropertyChanging("Dog", e, _dogReference);
                    this._dog = value;
                    if ((old != null))
                    {
                        old.ParentChanged -= this.OnResetDog;
                        old.Parent = null;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetDog;
                    }
                    this.OnDogChanged(e);
                    this.OnPropertyChanged("Dog", e, _dogReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ContainerChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ContainerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc2020/model/scenario4/1.0#//Container")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Person property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PersonChanging;
        
        /// <summary>
        /// Gets fired when the Person property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PersonChanged;
        
        /// <summary>
        /// Gets fired before the Dog property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DogChanging;
        
        /// <summary>
        /// Gets fired when the Dog property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DogChanged;
        
        private static ITypedElement RetrievePersonReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2020.Roundtrip.Scenario4.V1.Model.Container.ClassInstance)).Resolve("person")));
        }
        
        /// <summary>
        /// Raises the PersonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPersonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PersonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PersonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPersonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PersonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Person property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPerson(object sender, System.EventArgs eventArgs)
        {
            this.Person = null;
        }
        
        private static ITypedElement RetrieveDogReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2020.Roundtrip.Scenario4.V1.Model.Container.ClassInstance)).Resolve("dog")));
        }
        
        /// <summary>
        /// Raises the DogChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDogChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DogChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DogChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDogChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DogChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Dog property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDog(object sender, System.EventArgs eventArgs)
        {
            this.Dog = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Person))
            {
                return ModelHelper.CreatePath("Person");
            }
            if ((element == this.Dog))
            {
                return ModelHelper.CreatePath("Dog");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "PERSON"))
            {
                return this.Person;
            }
            if ((reference == "DOG"))
            {
                return this.Dog;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PERSON"))
            {
                this.Person = ((IPerson)(value));
                return;
            }
            if ((feature == "DOG"))
            {
                this.Dog = ((IDog)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PERSON"))
            {
                return new PersonProxy(this);
            }
            if ((reference == "DOG"))
            {
                return new DogProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://ttc2020/model/scenario4/1.0#//Container")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Container class
        /// </summary>
        public class ContainerChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Container _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ContainerChildrenCollection(Container parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Person != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Dog != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PersonChanged += this.PropagateValueChanges;
                this._parent.DogChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PersonChanged -= this.PropagateValueChanges;
                this._parent.DogChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Person == null))
                {
                    IPerson personCasted = item.As<IPerson>();
                    if ((personCasted != null))
                    {
                        this._parent.Person = personCasted;
                        return;
                    }
                }
                if ((this._parent.Dog == null))
                {
                    IDog dogCasted = item.As<IDog>();
                    if ((dogCasted != null))
                    {
                        this._parent.Dog = dogCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Person = null;
                this._parent.Dog = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Person))
                {
                    return true;
                }
                if ((item == this._parent.Dog))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Person != null))
                {
                    array[arrayIndex] = this._parent.Person;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Dog != null))
                {
                    array[arrayIndex] = this._parent.Dog;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Person == item))
                {
                    this._parent.Person = null;
                    return true;
                }
                if ((this._parent.Dog == item))
                {
                    this._parent.Dog = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Person).Concat(this._parent.Dog).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Container class
        /// </summary>
        public class ContainerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Container _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ContainerReferencedElementsCollection(Container parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Person != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Dog != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PersonChanged += this.PropagateValueChanges;
                this._parent.DogChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PersonChanged -= this.PropagateValueChanges;
                this._parent.DogChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Person == null))
                {
                    IPerson personCasted = item.As<IPerson>();
                    if ((personCasted != null))
                    {
                        this._parent.Person = personCasted;
                        return;
                    }
                }
                if ((this._parent.Dog == null))
                {
                    IDog dogCasted = item.As<IDog>();
                    if ((dogCasted != null))
                    {
                        this._parent.Dog = dogCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Person = null;
                this._parent.Dog = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Person))
                {
                    return true;
                }
                if ((item == this._parent.Dog))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Person != null))
                {
                    array[arrayIndex] = this._parent.Person;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Dog != null))
                {
                    array[arrayIndex] = this._parent.Dog;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Person == item))
                {
                    this._parent.Person = null;
                    return true;
                }
                if ((this._parent.Dog == item))
                {
                    this._parent.Dog = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Person).Concat(this._parent.Dog).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the person property
        /// </summary>
        private sealed class PersonProxy : ModelPropertyChange<TTC2020.Roundtrip.Scenario4.V1.Model.IContainer, IPerson>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PersonProxy(TTC2020.Roundtrip.Scenario4.V1.Model.IContainer modelElement) : 
                    base(modelElement, "person")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPerson Value
            {
                get
                {
                    return this.ModelElement.Person;
                }
                set
                {
                    this.ModelElement.Person = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dog property
        /// </summary>
        private sealed class DogProxy : ModelPropertyChange<TTC2020.Roundtrip.Scenario4.V1.Model.IContainer, IDog>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DogProxy(TTC2020.Roundtrip.Scenario4.V1.Model.IContainer modelElement) : 
                    base(modelElement, "dog")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDog Value
            {
                get
                {
                    return this.ModelElement.Dog;
                }
                set
                {
                    this.ModelElement.Dog = value;
                }
            }
        }
    }
}

